import moment from 'moment-timezone';
import { Request, Response } from 'express';
import logger from '../../logger';
import { storage, storageCommerce } from '../../services/storage';
import { GetSignedUrlConfig } from '@google-cloud/storage';

export default class ExportsStorageFileController {
  // Downloads file generated by ExportsController.account
  static async downloadStorageFile(req: Request, res: Response) {
    const {
      body: { date, fileType } // number-like string
    }: { body: { date: string, fileType: 'cartera_clientes' | 'cashin_cashout' } } = req;

    if (!['cartera_clientes', 'cashin_cashout'].includes(fileType)) {
      return res.status(422).json({ message: 'Unsupported file type.' });
    }

    const processDate = moment(parseInt(date, 10)).format('YYYYMMDD');
    const fileName = `${fileType}_${processDate}.xlsx`;
    logger.info("Trying to getting file url", { fileName });
    const urlConfig: GetSignedUrlConfig = {
      action: 'read',
      expires: moment().add(1, 'day').format('YYYY-MM-DD')
    };
    // get file
    const file = storage.file(fileName)
    // check if it exists before creating a signed url
    // this avoid an error on front which shows bucket names
    const [fileExists] = await file.exists().catch(() => [false]);
    if (!fileExists) {
      logger.info("File not found", { fileName });
      return res.status(404).json({ message: 'File not found.' });
    }
    // get signed url for existent file, return undefined on error
    const [fileUrl] = await file.getSignedUrl(urlConfig).catch(() => [undefined]);

    if (!fileUrl) {
      logger.info("File url error", { fileName });
      return res.status(500).json({ message: 'Could not generate signedUrl.' });
    }

    logger.info("File url sent", { fileName });
    return res.json({ url: fileUrl });
  }

  static async downloadMovementsStorageFile(req: Request, res: Response) {
    const {
      body: { filename, fileType } // number-like string
    }: { body: { filename: string, fileType: string } } = req;
    if (!['movements'].includes(fileType)) {
      return res.status(422).json({ message: 'Unsupported file type.' });
    }

    const fileName = `${filename}.xlsx`;
    logger.info("Trying to getting file url", { fileName });
    const urlConfig: GetSignedUrlConfig = {
      action: 'read',
      expires: moment().add(1, 'day').format('YYYY-MM-DD')
    };
    // get file
    const file = storageCommerce.file(fileName)
    const [fileExists] = await file.exists().catch(() => [false]);
    if (!fileExists) {
      logger.info("File not found", { fileName });
      return res.status(404).json({ message: 'File not found.' });
    }
    const [fileUrl] = await file.getSignedUrl(urlConfig).catch(() => [undefined]);

    if (!fileUrl) {
      logger.info("File url error", { fileName });
      return res.status(500).json({ message: 'Could not generate signedUrl.' });
    }

    logger.info("File url sent", { fileName });
    return res.json({ url: fileUrl });
  }

}